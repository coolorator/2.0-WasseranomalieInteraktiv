<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anomalie App 3.0</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #f0f2f5;
            color: #333;
            padding: 20px;
            text-align: center;
            max-width: 800px;
            margin: auto;
            line-height: 1.6;
        }

        #zoom-info {
            font-weight: bold;
            color: #007bff;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        h1 {
            color: #17183B;
            font-size: 1.5em;
        }

        p {
            margin-bottom: 20px;
        }

        #chart-container {
            background: #fff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        canvas {
            touch-action: none; /* Crucial for mobile zoom */
        }

        #reset-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }

        #reset-button:hover {
            background-color: #c82333;
        }

        @media (max-width: 600px) {
            body {
                padding: 10px;
            }

            h1 {
                font-size: 1.2em;
            }

            #chart-container {
                padding: 10px;
            }
        }
    </style>
</head>
<body>

    <div id="zoom-info">Zoom-Level: Normal</div>

    <h1>Wasser: Ein Stoff mit Superkräften</h1>
    <p>
        Eine davon ist die **Dichteanomalie**: Es dehnt sich beim Gefrieren stark aus und hat sein kleinstes Volumen bei +4°C. Erforsche dieses einzigartige Verhalten selbst.
    </p>

    <div id="chart-container">
        <canvas id="anomalyChart"></canvas>
    </div>

    <button id="reset-button">Zoom zurücksetzen</button>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js"></script>

    <script>
        // 1. DATA PREPARATION (SCIENTIFICALLY ACCURATE)
        // Set reference volume at 4°C to 1 liter.
        const refTemp = 4; // °C
        const tempPoints = [];
        const volumeLiquid = [];
        const volumeIce = [];

        // Function to calculate density of liquid water based on temperature (Kell, 1975)
        const getWaterVolume = (t) => {
            const rho_max = 999.972; // kg/m³ at 4°C
            const a = 9.49 * Math.pow(10, -6);
            const b = 5.1 * Math.pow(10, -8);
            const density = rho_max * (1 - a * Math.pow((t - refTemp), 2) - b * Math.pow((t - refTemp), 3));
            return rho_max / density; // Relative volume, where 1.0 is at 4°C
        };

        // Function to calculate volume of ice
        const getIceVolume = (t) => {
            const V_at_0 = getWaterVolume(0);
            const V_ice_at_0 = V_at_0 * 1.0907; // ~9% volume increase
            const beta_ice = 1.5 * Math.pow(10, -4); // Cubic expansion coefficient of ice (approx)
            return V_ice_at_0 * (1 - beta_ice * t);
        };

        // Generate data points
        // Liquid water: 20°C to 0°C
        for (let t = 20; t >= 0; t -= 0.5) {
            tempPoints.push(t);
            volumeLiquid.push(getWaterVolume(t));
        }

        // Ice: 0°C to -20°C
        for (let t = 0; t >= -20; t -= 0.5) {
            volumeIce.push(getIceVolume(t));
        }

        // 2. CHART CONFIGURATION
        const ctx = document.getElementById('anomalyChart').getContext('2d');
        const anomalyChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: tempPoints.concat(volumeIce.map((_, i) => 0 - i * 0.5)),
                datasets: [
                    {
                        label: 'Volumen (flüssiges Wasser)',
                        data: volumeLiquid.map((v, i) => ({ x: tempPoints[i], y: v })),
                        borderColor: 'rgba(0, 123, 255, 1)',
                        backgroundColor: 'rgba(0, 123, 255, 0.2)',
                        borderWidth: 2,
                        pointRadius: 0,
                        fill: false,
                        tension: 0.1,
                        segment: {
                            borderColor: (ctx) => {
                                // Highlight the section around the anomaly point
                                const x = ctx.p1.parsed.x;
                                if (x >= 0 && x <= 4) {
                                    return 'rgba(255, 193, 7, 1)';
                                }
                                return 'rgba(0, 123, 255, 1)';
                            }
                        }
                    },
                    {
                        label: 'Volumen (Eis)',
                        data: volumeIce.map((v, i) => ({ x: 0 - i * 0.5, y: v })),
                        borderColor: 'rgba(108, 117, 125, 1)',
                        backgroundColor: 'rgba(108, 117, 125, 0.2)',
                        borderWidth: 2,
                        pointRadius: 0,
                        fill: false,
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom',
                        title: {
                            display: true,
                            text: 'Temperatur (°C)',
                            font: {
                                size: 14,
                                weight: 'bold'
                            }
                        },
                        min: -20,
                        max: 20
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Relative Volumenänderung (V/V_min)',
                            font: {
                                size: 14,
                                weight: 'bold'
                            }
                        },
                        beginAtZero: false
                    }
                },
                plugins: {
                    legend: {
                        display: true
                    },
                    tooltip: {
                        callbacks: {
                            title: (context) => {
                                return `Temperatur: ${context[0].parsed.x.toFixed(2)}°C`;
                            },
                            label: (context) => {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += `${context.parsed.y.toFixed(4)} Liter`;
                                return label;
                            }
                        }
                    },
                    zoom: {
                        pan: {
                            enabled: true,
                            mode: 'xy',
                            threshold: 10
                        },
                        zoom: {
                            wheel: {
                                enabled: true,
                            },
                            pinch: {
                                enabled: true
                            },
                            mode: 'xy',
                            onZoomComplete: (context) => {
                                updateZoomInfo(context.chart);
                            }
                        }
                    }
                }
            }
        });

        // 3. INTERACTIVITY AND DYNAMIC UI
        const zoomInfo = document.getElementById('zoom-info');
        const resetButton = document.getElementById('reset-button');
        const startHeightCm = 6.5;

        // Function to calculate and update zoom info
        const updateZoomInfo = (chart) => {
            const yAxis = chart.options.scales.y;
            const originalMin = chart.scales.y.options.min;
            const originalMax = chart.scales.y.options.max;

            // Get the current visible range
            const currentMin = yAxis.min;
            const currentMax = yAxis.max;

            // Calculate zoom factor on y-axis
            const originalRange = originalMax - originalMin;
            const currentRange = currentMax - currentMin;
            const zoomFactor = originalRange / currentRange;

            if (zoomFactor > 1.05) { // Check if a significant zoom occurred
                const hypotheticalHeightMeters = (startHeightCm * zoomFactor) / 100;
                zoomInfo.textContent = `Wären die Ränder des Diagramms nicht abgeschnitten, hätte es jetzt eine Höhe von ${hypotheticalHeightMeters.toFixed(2)} Metern.`;
            } else {
                zoomInfo.textContent = 'Zoom-Level: Normal';
            }
        };

        // Event listener for reset button
        resetButton.addEventListener('click', () => {
            anomalyChart.resetZoom();
            updateZoomInfo(anomalyChart);
        });
        
        // Initial update
        updateZoomInfo(anomalyChart);
    </script>
</body>
</html>
