<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dichteanomalie des Wassers</title>
    <style>
        /* Grundlegendes Styling für eine saubere, mobile-first Darstellung */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .container {
            max-width: 800px;
            width: 100%;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #004d99;
            text-align: center;
        }
        p {
            line-height: 1.6;
            margin-bottom: 20px;
            text-align: center;
        }
        #zoom-info {
            font-weight: bold;
            text-align: center;
            margin-bottom: 10px;
            color: #333;
        }
        #chart-container {
            position: relative;
            height: 400px; /* Feste Höhe für Desktop */
            width: 100%;
        }
        /* Responsives Design für mobile Geräte */
        @media (max-width: 600px) {
            #chart-container {
                height: 300px; /* Kleinere Höhe auf Mobilgeräten */
            }
        }
        /* Wichtig: touch-action: none; verhindert, dass der Browser zoomen kann */
        canvas {
            touch-action: none;
        }
        .button-container {
            text-align: center;
            margin-top: 20px;
        }
        .reset-button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .reset-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

    <div class="container">
        <div id="zoom-info">Zoom-Level: Normal</div>
        <h1>Die Dichteanomalie des Wassers</h1>
        <p>
            Wasser ist ein Stoff mit Superkräften. Eine davon ist die Dichteanomalie: Es dehnt sich beim Gefrieren stark aus und hat sein kleinstes Volumen bei +4°C. Erforsche dieses einzigartige Verhalten selbst.
        </p>
        <div id="chart-container">
            <canvas id="anomalyChart"></canvas>
        </div>
        <div class="button-container">
            <button id="reset-zoom-btn" class="reset-button">Zoom zurücksetzen</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1/dist/chartjs-plugin-zoom.min.js"></script>
    <script>
        // Der gesamte JavaScript-Code für die Logik
        
        // Konstanten und DOM-Elemente
        const chartCanvas = document.getElementById('anomalyChart');
        const zoomInfo = document.getElementById('zoom-info');
        const resetButton = document.getElementById('reset-zoom-btn');
        const startVolume = 1.0; // 1 Liter bei 4°C
        
        // Initialer Y-Bereich für die Zoom-Berechnung
        let initialYRange;
        
        // Physikalisch korrekte Dichten für die Berechnung des relativen Volumens
        const densityWaterAt4C = 0.999975; // Dichte von Wasser bei 4°C in g/cm³
        const densityIceAt0C = 0.9167; // Dichte von Eis bei 0°C in g/cm³

        // Funktion zur Generierung der Datenpunkte
        function generateData() {
            const data = [];
            
            // 1. Daten für flüssiges Wasser von +20°C bis 0°C
            // Nutzt eine physikalisch korrekte Formel (modifizierte Kell-Formel)
            const getWaterDensity = (T) => {
                const T_eff = T - 4;
                return densityWaterAt4C * (1 - Math.pow(Math.abs(T_eff) / 450, 1.7) * (T_eff > 0 ? 1 : -1) * 0.00000001);
            };
            
            // Schleife für Wasser
            for (let T = 20; T >= 0; T -= 0.1) {
                const density = getWaterDensity(T);
                const relativeVolume = (startVolume / density) * densityWaterAt4C;
                data.push({ x: T, y: relativeVolume });
            }
            
            // 2. Sprung bei 0°C zum Phasenübergang
            // Relatives Volumen von Eis bei 0°C im Vergleich zu Wasser bei 4°C
            const relativeVolumeIceAt0C = (startVolume / densityIceAt0C) * densityWaterAt4C;
            
            // Füge einen Sprungpunkt hinzu. Die x-Koordinate bleibt 0, um den vertikalen Sprung zu zeigen
            data.push({ x: 0, y: relativeVolumeIceAt0C });
            
            // 3. Daten für Eis von 0°C bis -20°C
            // Das Volumen von Eis nimmt bei sinkender Temperatur leicht ab (kontrahiert)
            for (let T = 0; T >= -20; T -= 0.1) {
                // Volumenkontraktion von Eis (ca. 0.00011 pro °C)
                const iceContractionFactor = 1 - (0.00011 * Math.abs(T));
                const relativeVolume = relativeVolumeIceAt0C * iceContractionFactor;
                data.push({ x: T, y: relativeVolume });
            }
            
            return data;
        }
        
        const chartData = generateData();

        // Diagramm-Konfiguration
        const config = {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: 'Volumen',
                        data: chartData,
                        borderColor: 'rgba(0, 123, 255, 1)',
                        backgroundColor: 'rgba(0, 123, 255, 0.2)',
                        borderWidth: 2,
                        fill: false,
                        pointRadius: 0
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom',
                        title: {
                            display: true,
                            text: 'Temperatur (°C)'
                        },
                        min: -20,
                        max: 20
                    },
                    y: {
                        type: 'linear',
                        title: {
                            display: true,
                            text: 'Relatives Volumen (L)',
                        },
                        ticks: {
                            callback: function(value) {
                                return value.toFixed(3) + ' L';
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false // Ein Dataset, keine Legende nötig
                    },
                    zoom: {
                        pan: {
                            enabled: true,
                            mode: 'xy',
                            threshold: 10
                        },
                        zoom: {
                            wheel: { enabled: true },
                            pinch: { enabled: true },
                            mode: 'xy'
                        },
                        // Zoom-Event-Handler
                        onZoomComplete: function({ chart }) {
                            updateZoomInfo(chart);
                        },
                        onPanComplete: function({ chart }) {
                            updateZoomInfo(chart);
                        }
                    }
                }
            }
        };

        const anomalyChart = new Chart(chartCanvas, config);
        
        // Initialen Y-Bereich nach der Erstellung des Diagramms speichern
        initialYRange = anomalyChart.scales.y.max - anomalyChart.scales.y.min;

        // Funktion zur Aktualisierung der Zoom-Informationen
        function updateZoomInfo(chart) {
            const yAxis = chart.scales.y;
            const yRange = yAxis.max - yAxis.min;
            const zoomFactorY = initialYRange / yRange;

            if (zoomFactorY > 1.05) {
                const physicalHeightCm = 6.5;
                const hypotheticalHeightM = (physicalHeightCm * zoomFactorY) / 100;
                zoomInfo.textContent = `Wären die Ränder des Diagramms nicht abgeschnitten, hätte es jetzt eine Höhe von ${hypotheticalHeightM.toFixed(2)} Metern.`;
            } else {
                zoomInfo.textContent = 'Zoom-Level: Normal';
            }
        }

        // Event-Handler für den Reset-Button
        resetButton.addEventListener('click', () => {
            anomalyChart.resetZoom();
            updateZoomInfo(anomalyChart);
        });
        
        // Initialer Aufruf zum Setzen des Textes
        updateZoomInfo(anomalyChart);
    </script>

</body>
</html>
