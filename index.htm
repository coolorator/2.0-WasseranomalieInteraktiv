<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anomalie App 3.0</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #f0f2f5;
            color: #333;
            padding: 20px;
            text-align: center;
            max-width: 800px;
            margin: auto;
            line-height: 1.6;
        }

        #zoom-info {
            font-weight: bold;
            color: #007bff;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        h1 {
            color: #17183B;
            font-size: 1.5em;
        }

        p {
            margin-bottom: 20px;
        }

        #chart-container {
            background: #fff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        #anomalyChart {
            height: 450px;
        }

        @media (max-width: 600px) {
            body {
                padding: 10px;
            }

            h1 {
                font-size: 1.2em;
            }

            #chart-container {
                padding: 10px;
            }
        }
    </style>
</head>
<body>

    <div id="zoom-info">Zoom-Level: Normal</div>

    <h1>Wasser: Ein Stoff mit Superkräften</h1>
    <p>
        Eine davon ist die **Dichteanomalie**: Es dehnt sich beim Gefrieren stark aus und hat sein kleinstes Volumen bei +4°C. Erforsche dieses einzigartige Verhalten selbst.
    </p>

    <div id="chart-container">
        <div id="anomalyChart"></div>
    </div>

    <script src="https://cdn.plot.ly/plotly-2.27.0.min.js" charset="utf-8"></script>

    <script>
        // 1. DATA PREPARATION (SCIENTIFICALLY ACCURATE)
        const refTemp = 4;
        const getWaterVolume = (t) => {
            const rho_max = 999.972;
            const a = 9.49 * Math.pow(10, -6);
            const b = 5.1 * Math.pow(10, -8);
            const density = rho_max * (1 - a * Math.pow((t - refTemp), 2) - b * Math.pow((t - refTemp), 3));
            return rho_max / density;
        };

        const getIceVolume = (t) => {
            const V_at_0 = getWaterVolume(0);
            const V_ice_at_0 = V_at_0 * 1.0907;
            const beta_ice = 1.5 * Math.pow(10, -4);
            return V_ice_at_0 * (1 - beta_ice * t);
        };

        const tempLiquid = [];
        const volumeLiquid = [];
        for (let t = 20; t >= 0; t -= 0.5) {
            tempLiquid.push(t);
            volumeLiquid.push(getWaterVolume(t));
        }

        const tempIce = [];
        const volumeIce = [];
        for (let t = 0; t >= -20; t -= 0.5) {
            tempIce.push(t);
            volumeIce.push(getIceVolume(t));
        }

        // 2. PLOTLY CHART CONFIGURATION
        const liquidTrace = {
            x: tempLiquid,
            y: volumeLiquid,
            mode: 'lines',
            name: 'Volumen (flüssiges Wasser)',
            line: { color: 'rgba(0, 123, 255, 1)', width: 2 }
        };

        const iceTrace = {
            x: tempIce,
            y: volumeIce,
            mode: 'lines',
            name: 'Volumen (Eis)',
            line: { color: 'rgba(108, 117, 125, 1)', width: 2 }
        };

        const data = [liquidTrace, iceTrace];

        const layout = {
            title: 'Volumen von Wasser und Eis vs. Temperatur',
            xaxis: {
                title: 'Temperatur (°C)',
                range: [-20, 20]
            },
            yaxis: {
                title: 'Relative Volumenänderung (V/V_min)',
                rangemode: 'tozero' // Let plotly handle the range
            },
            autosize: true,
            margin: { t: 50, b: 50, l: 50, r: 50 },
            hovermode: 'closest',
            showlegend: true,
            dragmode: 'pan',
        };

        const config = {
            responsive: true,
            displayModeBar: true,
            modeBarButtonsToRemove: ['zoom2d', 'select2d', 'lasso2d', 'autoscale', 'toggleSpikelines', 'hovercompare', 'hoverclosest'],
            modeBarButtonsToAdd: [{
                name: 'Reset Zoom',
                icon: Plotly.Icons.home,
                click: function() {
                    Plotly.relayout('anomalyChart', {
                        'xaxis.range': [-20, 20],
                        'yaxis.autorange': true
                    });
                }
            }]
        };

        Plotly.newPlot('anomalyChart', data, layout, config);

        // 3. INTERACTIVITY AND DYNAMIC UI
        const zoomInfo = document.getElementById('zoom-info');
        const startHeightCm = 6.5;

        const updateZoomInfo = () => {
            const currentLayout = document.getElementById('anomalyChart').layout;
            const yAxis = currentLayout.yaxis;
            
            // Get original range. We use a defined range to be consistent.
            const originalMinY = 0.99;
            const originalMaxY = 1.12;

            // Get current visible range
            const currentMinY = yAxis.range[0];
            const currentMaxY = yAxis.range[1];

            // Calculate zoom factor
            const originalRangeY = originalMaxY - originalMinY;
            const currentRangeY = currentMaxY - currentMinY;
            const zoomFactor = originalRangeY / currentRangeY;

            if (zoomFactor > 1.05) {
                const hypotheticalHeightMeters = (startHeightCm * zoomFactor) / 100;
                zoomInfo.textContent = `Wären die Ränder des Diagramms nicht abgeschnitten, hätte es jetzt eine Höhe von ${hypotheticalHeightMeters.toFixed(2)} Metern.`;
            } else {
                zoomInfo.textContent = 'Zoom-Level: Normal';
            }
        };

        document.getElementById('anomalyChart').on('plotly_relayout', updateZoomInfo);

        // Initial update
        updateZoomInfo();
    </script>
</body>
</html>
